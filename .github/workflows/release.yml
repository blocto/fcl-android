name: Release
on:
  workflow_dispatch:
    inputs:
      releaseAppDistribution:
        description: 'Distribute sample app'
        required: false
        type: boolean
        default: true
jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
      - run: ./ci_clear_gradle_cache.sh
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/**.gradle.kts', '**/gradle/wrapper/gradle-wrapper.properties', '**/libs.versions.toml') }}

      - name: Publish library
        env:
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.GPG_PASSWORD }}
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
        run: ./publish_remote.sh

      - name: Get library version
        run: echo "version_name=$(awk -F= '$1=="VERSION_NAME" {print $2}' gradle.properties)" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          git config --global user.email "clement@portto.com"
          git config --global user.name "clement.l"
          git tag -a ${{ env.version_name }} -m "Release v${{ env.version_name }}"
          git push origin ${{ env.version_name }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version_name }}
          release_name: v${{ env.version_name }}
          draft: true
          prerelease: false

  distribution:
    name: Distribute sample app
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ github.event.inputs.releaseAppDistribution }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17

      - run: ./ci_clear_gradle_cache.sh

      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/**.gradle.kts', '**/gradle/wrapper/gradle-wrapper.properties', '**/libs.versions.toml') }}

      - name: Put files
        env:
          KEYSTORE: ${{ secrets.SAMPLE_APP_KEYSTORE }}
          KEYSTORE_PASSWORD: ${{ secrets.SAMPLE_APP_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.SAMPLE_APP_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.SAMPLE_APP_KEY_PASSWORD }}
          APP_DISTRIBUTION: ${{ secrets.SAMPLE_APP_DISTRIBUTION }}
        run: |
          echo "Adding files ✍️"
          TMP_SECRETS_PATH=secrets
          mkdir ${TMP_SECRETS_PATH}
          echo $KEYSTORE | base64 -d > "${TMP_SECRETS_PATH}"/keystore.jks
          echo "STORE_PASSWORD=${KEYSTORE_PASSWORD}" >>  "${TMP_SECRETS_PATH}"/signing.properties
          echo "KEY_ALIAS=${KEY_ALIAS}" >>  "${TMP_SECRETS_PATH}"/signing.properties
          echo "KEY_PASSWORD=${KEY_PASSWORD}" >>  "${TMP_SECRETS_PATH}"/signing.properties
          echo $APP_DISTRIBUTION >  "${TMP_SECRETS_PATH}"/app-distribution.json
          echo "All files Added ✅"

      - name: Release app
        run: ./gradlew clean fcl-sample:assembleRelease fcl-sample:appDistributionUploadRelease
